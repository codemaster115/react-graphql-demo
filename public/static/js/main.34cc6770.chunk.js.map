{"version":3,"sources":["config/queries.js","components/UserList.tsx","components/Query.tsx","components/UserForm/Step1.tsx","components/UserForm/Step2.tsx","components/UserForm/Step3.tsx","components/UserForm/index.tsx","pages/Main.tsx","config/graphql.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["GET_BANKS","gql","_templateObject","GET_BRANCHES","_templateObject2","GET_USERS","_templateObject3","ADD_USER","_templateObject4","UPDATE_USER","_templateObject5","DELETE_USERS","_templateObject6","_templateObject7","UserTable","Table","UserList","columns","title","dataIndex","sorter","a","b","accountHolderName","employeeName","bank","name","branch","accountType","render","text","record","react","es_button","onClick","_this","handleEdit","searchInput","getColumnSearchProps","filterDropdown","_ref","setSelectedKeys","selectedKeys","confirm","clearFilters","style","padding","input","Search","ref","node","placeholder","concat","onSearch","handleSearch","value","onChange","e","target","width","marginBottom","display","handleReset","size","filterIcon","filtered","icon","type","color","undefined","onFilter","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","focus","setState","searchText","user","onEdit","this","props","_this2","_this$props","data","onSelectionChange","loading","users","tableColumns","map","column","Object","objectSpread","UserList_UserTable","bordered","rowKey","dataSource","rowSelection","React","withQuery","BankQuery","Query","BranchQuery","Option","Select","Step1","form","getFieldDecorator","react_default","createElement","Query_BankQuery","query","_ref2","error","banks","Query_BranchQuery","_ref4","branches","Fragment","es_form","Item","initialValue","id","es_select","key","Step2","accountNumber","rules","max","Step3","employeeNumber","UserFormComponent","state","curStep","onOk","onCancel","steps","content","UserForm_Step1","UserForm_Step2","UserForm_Step3","modal","step","i","className","length","next","marginLeft","prev","UserForm","Form","create","Main","selectedRowKeys","visibleModal","selectedUser","formRef","onAddUser","onDeleteUsers","ids","client","mutate","mutation","variables","update","cache","deleteUsers","readQuery","writeQuery","onEditUser","handleSubmit","validateFields","err","values","replace","m","repeat","substr","then","res","resetFields","addUser","userFormRef","_this$state","disabled","components_UserList","items","components_UserForm","wrappedComponentRef","withApollo","apolloClient","ApolloClient","uri","App","react_apollo_esm","pages_Main","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34cc6770.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\r\n\r\nconst GET_BANKS = gql`\r\n  {\r\n    banks {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_BRANCHES = gql`\r\n  {\r\n    branches {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_USERS = gql`\r\n  {\r\n    users {\r\n      id\r\n      accountHolderName\r\n      employeeName\r\n      bank {\r\n        id\r\n        name\r\n      }\r\n      branch {\r\n        id\r\n        name\r\n      }\r\n      accountType\r\n      accountNumber\r\n      employeeNumber\r\n      lastUpdated\r\n    }\r\n  }\r\n`;\r\n\r\nconst ADD_USER = gql`\r\n  mutation addUser($user: BankUserInput!) {\r\n    addUser(user: $user) {\r\n      id\r\n      accountHolderName\r\n      employeeName\r\n      bank {\r\n        id\r\n        name\r\n      }\r\n      branch {\r\n        id\r\n        name\r\n      }\r\n      accountType\r\n      accountNumber\r\n      employeeNumber\r\n      lastUpdated\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_USER = gql`\r\n  mutation updateUser($id: ID!, $user: BankUserInput!) {\r\n    updateUser(id: $id, user: $user) {\r\n      id\r\n      accountHolderName\r\n      employeeName\r\n      bank {\r\n        id\r\n        name\r\n      }\r\n      branch {\r\n        id\r\n        name\r\n      }\r\n      accountType\r\n      accountNumber\r\n      employeeNumber\r\n      lastUpdated\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_USER = gql`\r\n  mutation deleteUser($id: ID!) {\r\n    deleteUser(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_USERS = gql`\r\n  mutation deleteUsers($ids: [ID]!) {\r\n    deleteUsers(ids: $ids) {\r\n      id\r\n      accountHolderName\r\n      employeeName\r\n      bank {\r\n        id\r\n        name\r\n      }\r\n      branch {\r\n        id\r\n        name\r\n      }\r\n      accountType\r\n      accountNumber\r\n      employeeNumber\r\n      lastUpdated\r\n    }\r\n  }\r\n`;\r\n\r\nexport {\r\n  GET_BANKS,\r\n  GET_BRANCHES,\r\n  GET_USERS,\r\n  ADD_USER,\r\n  UPDATE_USER,\r\n  DELETE_USER,\r\n  DELETE_USERS\r\n};\r\n","import * as React from \"react\";\r\nimport { withQuery, DataProps } from \"react-apollo\";\r\nimport { Table, Button, Icon, Input } from \"antd\";\r\nimport { ColumnProps } from \"antd/lib/table\";\r\nimport Search from \"antd/lib/input/Search\";\r\n\r\nimport { BankUser } from \"../config/types\";\r\nimport { GET_USERS } from \"../config/queries\";\r\n\r\nclass UserTable extends Table<BankUser> {}\r\n\r\ninterface Response {\r\n  users: Array<BankUser>;\r\n}\r\n\r\ninterface OwnProps {\r\n  onEdit: (user: BankUser) => void;\r\n  onSelectionChange: (\r\n    selectedRowKeys: string[] | number[],\r\n    selectedRows: BankUser[]\r\n  ) => void;\r\n}\r\n\r\nclass UserList extends React.Component<OwnProps & DataProps<Response>> {\r\n  columns: ColumnProps<BankUser>[] = [\r\n    {\r\n      title: \"Account Holder Name\",\r\n      dataIndex: \"accountHolderName\",\r\n      sorter: (a, b) => (a.accountHolderName < b.accountHolderName ? 1 : -1)\r\n    },\r\n    {\r\n      title: \"Employee Name\",\r\n      dataIndex: \"employeeName\",\r\n      sorter: (a, b) => (a.employeeName < b.employeeName ? 1 : -1)\r\n    },\r\n    {\r\n      title: \"Bank name\",\r\n      dataIndex: \"bank.name\",\r\n      sorter: (a, b) => (a.bank.name < b.bank.name ? 1 : -1)\r\n    },\r\n    {\r\n      title: \"Branch name\",\r\n      dataIndex: \"branch.name\",\r\n      sorter: (a, b) => (a.branch.name < b.branch.name ? 1 : -1)\r\n    },\r\n    {\r\n      title: \"Account type\",\r\n      dataIndex: \"accountType\",\r\n      sorter: (a, b) => (a.accountType < b.accountType ? 1 : -1)\r\n    },\r\n    {\r\n      title: \"Account number\",\r\n      dataIndex: \"accountNumber\"\r\n    },\r\n    {\r\n      title: \"Employee number\",\r\n      dataIndex: \"employeeNumber\"\r\n    },\r\n    {\r\n      title: \"\",\r\n      render: (text, record) => {\r\n        return <Button onClick={() => this.handleEdit(record)}>Edit</Button>;\r\n      }\r\n    }\r\n  ];\r\n\r\n  searchInput: Search | null = null;\r\n\r\n  getColumnSearchProps = (dataIndex: string) => {\r\n    if (dataIndex) {\r\n      return {\r\n        filterDropdown: ({\r\n          setSelectedKeys,\r\n          selectedKeys,\r\n          confirm,\r\n          clearFilters\r\n        }: {\r\n          setSelectedKeys: Function;\r\n          selectedKeys: Array<any>;\r\n          confirm: Function;\r\n          clearFilters: Function;\r\n        }) => (\r\n          <div style={{ padding: 8 }}>\r\n            <Input.Search\r\n              ref={node => {\r\n                this.searchInput = node;\r\n              }}\r\n              placeholder={`Search ${dataIndex}`}\r\n              onSearch={() => this.handleSearch(selectedKeys, confirm)}\r\n              value={selectedKeys[0]}\r\n              onChange={e =>\r\n                setSelectedKeys(e.target.value ? [e.target.value] : [])\r\n              }\r\n              style={{ width: 188, marginBottom: 8, display: \"block\" }}\r\n            />\r\n            <Button\r\n              onClick={() => this.handleReset(clearFilters)}\r\n              size=\"small\"\r\n              style={{ width: 90 }}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        ),\r\n        filterIcon: (filtered: boolean) => (\r\n          <Icon\r\n            type=\"search\"\r\n            style={{ color: filtered ? \"#1890ff\" : undefined }}\r\n          />\r\n        ),\r\n        onFilter: (value: any, record: BankUser) =>\r\n          record[dataIndex]\r\n            .toString()\r\n            .toLowerCase()\r\n            .includes(value.toLowerCase()),\r\n        onFilterDropdownVisibleChange: (visible: boolean) => {\r\n          if (visible) {\r\n            setTimeout(() => this.searchInput && this.searchInput.focus());\r\n          }\r\n        }\r\n      };\r\n    }\r\n  };\r\n\r\n  handleSearch = (selectedKeys: Array<any>, confirm: Function) => {\r\n    confirm();\r\n    this.setState({ searchText: selectedKeys[0] });\r\n  };\r\n\r\n  handleReset = (clearFilters: Function) => {\r\n    clearFilters();\r\n    this.setState({ searchText: \"\" });\r\n  };\r\n\r\n  handleEdit(user: BankUser) {\r\n    const { onEdit } = this.props;\r\n    onEdit(user);\r\n  }\r\n\r\n  render() {\r\n    const { data, onSelectionChange } = this.props;\r\n    const { loading, users } = data;\r\n    const tableColumns = this.columns.map(column => ({\r\n      ...column,\r\n      ...this.getColumnSearchProps(column.dataIndex || \"\")\r\n    }));\r\n\r\n    return (\r\n      <UserTable\r\n        bordered\r\n        loading={loading}\r\n        rowKey=\"id\"\r\n        columns={tableColumns}\r\n        dataSource={users}\r\n        rowSelection={{\r\n          onChange: onSelectionChange\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport { UserTable };\r\n\r\nexport default withQuery<OwnProps, Response, {}, DataProps<Response>>(\r\n  GET_USERS\r\n)(UserList);\r\n","import { Query } from \"react-apollo\";\r\nimport { Bank, Branch } from \"../config/types\";\r\n\r\ninterface BankData {\r\n  banks: Array<Bank>;\r\n}\r\n\r\ninterface BranchData {\r\n  branches: Array<Branch>;\r\n}\r\n\r\nclass BankQuery extends Query<BankData> {}\r\nclass BranchQuery extends Query<BranchData> {}\r\n\r\nexport { BankQuery, BranchQuery };\r\n","import React from \"react\";\r\nimport { Form, Select } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { BankQuery, BranchQuery } from \"../Query\";\r\nimport { GET_BANKS, GET_BRANCHES } from \"../../config/queries\";\r\nimport { BankUserInput, BankUser } from \"../../config/types\";\r\n\r\nconst { Option } = Select;\r\n\r\ninterface IProps extends FormComponentProps<BankUserInput> {\r\n  user?: BankUser;\r\n}\r\n\r\nconst Step1 = ({ form, user }: IProps) => {\r\n  const { getFieldDecorator } = form;\r\n  return (\r\n    <BankQuery query={GET_BANKS}>\r\n      {({ data, loading, error }) => {\r\n        if (loading || error) {\r\n          return null;\r\n        }\r\n        const { banks } = data || { banks: [] };\r\n        return (\r\n          <BranchQuery query={GET_BRANCHES}>\r\n            {({ data, loading, error }) => {\r\n              if (loading || error) {\r\n                return null;\r\n              }\r\n              const { branches } = data || { branches: [] };\r\n              return (\r\n                <React.Fragment>\r\n                  <Form.Item>\r\n                    {getFieldDecorator(\"bank\", {\r\n                      initialValue: user && user.bank && user.bank.id\r\n                    })(\r\n                      <Select>\r\n                        {banks.map(bank => (\r\n                          <Option key={bank.id} value={bank.id}>\r\n                            {bank.name}\r\n                          </Option>\r\n                        ))}\r\n                      </Select>\r\n                    )}\r\n                  </Form.Item>\r\n                  <Form.Item>\r\n                    {getFieldDecorator(\"branch\", {\r\n                      initialValue: user && user.branch && user.branch.id\r\n                    })(\r\n                      <Select>\r\n                        {branches.map(branch => (\r\n                          <Option key={branch.id} value={branch.id}>\r\n                            {branch.name}\r\n                          </Option>\r\n                        ))}\r\n                      </Select>\r\n                    )}\r\n                  </Form.Item>\r\n                </React.Fragment>\r\n              );\r\n            }}\r\n          </BranchQuery>\r\n        );\r\n      }}\r\n    </BankQuery>\r\n  );\r\n};\r\n\r\nexport default Step1;\r\n","import React from \"react\";\r\nimport { Form, Input } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { BankUserInput, BankUser } from \"../../config/types\";\r\n\r\ninterface IProps extends FormComponentProps<BankUserInput> {\r\n  user?: BankUser;\r\n}\r\n\r\nconst Step2 = ({ form, user }: IProps) => {\r\n  const { getFieldDecorator } = form;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"accountHolderName\", {\r\n          initialValue: user && user.accountHolderName\r\n        })(<Input placeholder={\"Account Holder Name\"} />)}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"accountType\", {\r\n          initialValue: user && user.accountType\r\n        })(<Input placeholder={\"Account Type\"} />)}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"accountNumber\", {\r\n          initialValue: user && user.accountNumber,\r\n          rules: [{ max: 7 }]\r\n        })(<Input placeholder={\"Account Number\"} />)}\r\n      </Form.Item>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Step2;\r\n","import React from \"react\";\r\nimport { Form, Input } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { BankUserInput, BankUser } from \"../../config/types\";\r\n\r\ninterface IProps extends FormComponentProps<BankUserInput> {\r\n  user?: BankUser;\r\n}\r\n\r\nconst Step3 = ({ form, user }: IProps) => {\r\n  const { getFieldDecorator } = form;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"employeeName\", {\r\n          initialValue: user && user.employeeName\r\n        })(<Input placeholder={\"Employee Name\"} />)}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"employeeNumber\", {\r\n          initialValue: user && user.employeeNumber,\r\n          rules: [{ max: 15 }]\r\n        })(<Input placeholder={\"Employee Number\"} />)}\r\n      </Form.Item>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Step3;\r\n","import * as React from \"react\";\r\nimport { Modal, Form, Button } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { BankUser, BankUserInput } from \"../../config/types\";\r\nimport Step1 from \"./Step1\";\r\nimport Step2 from \"./Step2\";\r\nimport Step3 from \"./Step3\";\r\n\r\nimport \"./styles.css\";\r\n\r\ninterface IStep {\r\n  title: string;\r\n  content: React.ReactNode;\r\n}\r\n\r\ninterface IProps extends FormComponentProps<BankUserInput> {\r\n  visible: boolean;\r\n  user?: BankUser;\r\n  onOk: () => void;\r\n  onCancel: () => void;\r\n  handleSubmit: () => void;\r\n}\r\n\r\ninterface IState {\r\n  curStep: number;\r\n}\r\n\r\nclass UserFormComponent extends React.Component<IProps, IState> {\r\n  state: IState = {\r\n    curStep: 0\r\n  };\r\n\r\n  next() {\r\n    const curStep = this.state.curStep + 1;\r\n    this.setState({ curStep });\r\n  }\r\n\r\n  prev() {\r\n    const curStep = this.state.curStep - 1;\r\n    this.setState({ curStep });\r\n  }\r\n\r\n  render() {\r\n    const { visible, user, onOk, onCancel, form } = this.props;\r\n    const { curStep } = this.state;\r\n\r\n    const steps: Array<IStep> = [\r\n      {\r\n        title: \"Bank Info\",\r\n        content: <Step1 form={form} user={user} />\r\n      },\r\n      {\r\n        title: \"Account Info\",\r\n        content: <Step2 form={form} user={user} />\r\n      },\r\n      {\r\n        title: \"Employee Info\",\r\n        content: <Step3 form={form} user={user} />\r\n      }\r\n    ];\r\n    return (\r\n      <Modal\r\n        title={user ? \"Edit User\" : \"Add User\"}\r\n        visible={visible}\r\n        onOk={onOk}\r\n        onCancel={onCancel}\r\n      >\r\n        <Form>\r\n          {steps.map((step, i) => (\r\n            <div\r\n              key={step.title}\r\n              className={i === curStep ? \"foo fade-in\" : \"foo\"}\r\n            >\r\n              {step.content}\r\n            </div>\r\n          ))}\r\n          <div className=\"steps-action\">\r\n            {curStep < steps.length - 1 && (\r\n              <Button onClick={() => this.next()}>Next</Button>\r\n            )}\r\n            {curStep > 0 && (\r\n              <Button style={{ marginLeft: 8 }} onClick={() => this.prev()}>\r\n                Previous\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </Form>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst UserForm = Form.create({ name: \"form_user\" })(UserFormComponent);\r\n\r\nexport { UserForm };\r\n\r\nexport default UserForm;\r\n","import * as React from \"react\";\r\nimport { withApollo, WithApolloClient } from \"react-apollo\";\r\nimport { Button } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport UserList from \"../components/UserList\";\r\nimport {\r\n  UPDATE_USER,\r\n  DELETE_USERS,\r\n  ADD_USER,\r\n  GET_USERS\r\n} from \"../config/queries\";\r\nimport UserForm from \"../components/UserForm\";\r\nimport { BankUser, BankUserInput } from \"../config/types\";\r\n\r\ninterface IProps {}\r\ninterface IState {\r\n  selectedRowKeys: string[] | number[];\r\n  visibleModal: boolean;\r\n  selectedUser?: BankUser;\r\n}\r\n\r\nclass Main extends React.Component<WithApolloClient<IProps>, IState> {\r\n  state: IState = {\r\n    selectedRowKeys: [],\r\n    visibleModal: false,\r\n    selectedUser: undefined\r\n  };\r\n\r\n  formRef: {\r\n    props?: FormComponentProps<BankUserInput>;\r\n  } = {};\r\n\r\n  onAddUser = () => {\r\n    this.setState({\r\n      visibleModal: true,\r\n      selectedUser: undefined\r\n    });\r\n  };\r\n\r\n  onDeleteUsers = () => {\r\n    const { selectedRowKeys: ids } = this.state;\r\n    const { client } = this.props;\r\n\r\n    client.mutate({\r\n      mutation: DELETE_USERS,\r\n      variables: { ids },\r\n      update: (cache, { data: { deleteUsers } }) => {\r\n        const data = cache.readQuery<{ users: BankUser[] }>({\r\n          query: GET_USERS\r\n        });\r\n        if (data) {\r\n          cache.writeQuery({\r\n            query: GET_USERS,\r\n            data: {\r\n              users: deleteUsers\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  onEditUser = (user: BankUser) => {\r\n    this.setState({\r\n      visibleModal: true,\r\n      selectedUser: user\r\n    });\r\n  };\r\n\r\n  onOk = () => {\r\n    this.handleSubmit();\r\n  };\r\n\r\n  onCancel = () => {\r\n    this.setState({\r\n      visibleModal: false,\r\n      selectedUser: undefined\r\n    });\r\n  };\r\n\r\n  handleSubmit = () => {\r\n    if (this.formRef.props) {\r\n      const form = this.formRef.props.form;\r\n      form.validateFields((err, values) => {\r\n        const { selectedUser } = this.state;\r\n        const { client } = this.props;\r\n        if (err) {\r\n          return;\r\n        }\r\n\r\n        if (values.accountNumber) {\r\n          values.accountNumber = values.accountNumber.replace(\r\n            /\\d+/g,\r\n            m => \"0\".repeat(7).substr(m.length) + m\r\n          );\r\n        }\r\n\r\n        if (values.employeeNumber) {\r\n          values.employeeNumber = values.employeeNumber.replace(\r\n            /\\d+/g,\r\n            m => \"0\".repeat(15).substr(m.length) + m\r\n          );\r\n        }\r\n        if (!selectedUser) {\r\n          client\r\n            .mutate({\r\n              mutation: ADD_USER,\r\n              variables: { user: values },\r\n              update: (cache, { data: { addUser } }) => {\r\n                const data = cache.readQuery<{ users: BankUser[] }>({\r\n                  query: GET_USERS\r\n                });\r\n                if (data) {\r\n                  cache.writeQuery({\r\n                    query: GET_USERS,\r\n                    data: {\r\n                      users: data.users.concat(addUser)\r\n                    }\r\n                  });\r\n                }\r\n              }\r\n            })\r\n            .then(() => {\r\n              form.resetFields();\r\n              this.setState({ visibleModal: false });\r\n            });\r\n        } else {\r\n          client\r\n            .mutate({\r\n              mutation: UPDATE_USER,\r\n              variables: { id: selectedUser.id, user: values }\r\n            })\r\n            .then(res => {\r\n              form.resetFields();\r\n              this.setState({ visibleModal: false });\r\n            });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  userFormRef = (formRef: { props: FormComponentProps<BankUserInput> }) => {\r\n    this.formRef = formRef;\r\n  };\r\n\r\n  render() {\r\n    const { visibleModal, selectedRowKeys, selectedUser } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Button icon=\"plus\" onClick={this.onAddUser}>\r\n          Add User\r\n        </Button>\r\n        <Button\r\n          icon=\"delete\"\r\n          disabled={selectedRowKeys.length <= 0}\r\n          onClick={this.onDeleteUsers}\r\n        >\r\n          Delete User\r\n        </Button>\r\n        <UserList\r\n          onEdit={this.onEditUser}\r\n          onSelectionChange={items => this.setState({ selectedRowKeys: items })}\r\n        />\r\n        <UserForm\r\n          wrappedComponentRef={this.userFormRef}\r\n          visible={visibleModal}\r\n          user={selectedUser}\r\n          onOk={this.onOk}\r\n          onCancel={this.onCancel}\r\n          handleSubmit={this.handleSubmit}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withApollo(Main);\r\n","import ApolloClient from 'apollo-boost';\r\n\r\nconst apolloClient = new ApolloClient({\r\n  uri: \"/graphql\"\r\n});\r\n\r\nexport {\r\n  apolloClient\r\n};","import React, { Component } from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\n\nimport Main from \"./pages/Main\";\nimport { apolloClient } from \"./config/graphql\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={apolloClient}>\n        <Main />\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}