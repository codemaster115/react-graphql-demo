{"version":3,"sources":["config/queries.js","components/UserList.tsx","components/Query.tsx","components/UserForm/Step1.tsx","components/UserForm/Step2.tsx","components/UserForm/Step3.tsx","components/UserForm/index.tsx","pages/Main.tsx","config/graphql.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["GET_BANKS","gql","_templateObject","GET_BRANCHES","_templateObject2","GET_USERS","_templateObject3","ADD_USER","_templateObject4","UPDATE_USER","_templateObject5","DELETE_USERS","_templateObject6","_templateObject7","UserTable","Table","UserList","columns","title","dataIndex","sorter","a","b","accountHolderName","employeeName","bank","name","branch","accountType","render","text","record","react","es_button","onClick","_this","handleEdit","user","onEdit","this","props","_this$props","data","onSelectionChange","loading","users","UserList_UserTable","bordered","rowKey","dataSource","rowSelection","onChange","React","withQuery","BankQuery","Query","BranchQuery","Option","Select","Step1","_ref","form","getFieldDecorator","react_default","createElement","Query_BankQuery","query","_ref2","error","banks","Query_BranchQuery","_ref4","branches","Fragment","es_form","Item","initialValue","id","es_select","map","key","value","Step2","input","placeholder","accountNumber","Step3","employeeNumber","UserFormComponent","state","curStep","setState","_this2","visible","onOk","onCancel","steps","content","UserForm_Step1","UserForm_Step2","UserForm_Step3","modal","step","i","className","length","next","style","marginLeft","prev","UserForm","Form","create","Main","selectedRowKeys","visibleModal","selectedUser","undefined","formRef","onAddUser","onDeleteUsers","ids","client","mutate","mutation","variables","update","cache","deleteUsers","readQuery","writeQuery","onEditUser","handleSubmit","validateFields","err","values","console","log","then","res","resetFields","addUser","concat","userFormRef","_this$state","icon","disabled","components_UserList","items","components_UserForm","wrappedComponentRef","withApollo","apolloClient","ApolloClient","uri","App","react_apollo_esm","pages_Main","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c5113b75.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\r\n\r\nconst GET_BANKS = gql`\r\n  {\r\n    banks {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_BRANCHES = gql`\r\n  {\r\n    branches {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_USERS = gql`\r\n  {\r\n    users {\r\n      id\r\n      accountHolderName\r\n      employeeName\r\n      bank {\r\n        id\r\n        name\r\n      }\r\n      branch {\r\n        id\r\n        name\r\n      }\r\n      accountType\r\n      accountNumber\r\n      employeeNumber\r\n      lastUpdated\r\n    }\r\n  }\r\n`;\r\n\r\nconst ADD_USER = gql`\r\n  mutation addUser($user: BankUserInput!) {\r\n    addUser(user: $user) {\r\n      id\r\n      accountHolderName\r\n      employeeName\r\n      bank {\r\n        id\r\n        name\r\n      }\r\n      branch {\r\n        id\r\n        name\r\n      }\r\n      accountType\r\n      accountNumber\r\n      employeeNumber\r\n      lastUpdated\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_USER = gql`\r\n  mutation updateUser($id: ID!, $user: BankUserInput!) {\r\n    updateUser(id: $id, user: $user) {\r\n      id\r\n      accountHolderName\r\n      employeeName\r\n      bank {\r\n        id\r\n        name\r\n      }\r\n      branch {\r\n        id\r\n        name\r\n      }\r\n      accountType\r\n      accountNumber\r\n      employeeNumber\r\n      lastUpdated\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_USER = gql`\r\n  mutation deleteUser($id: ID!) {\r\n    deleteUser(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_USERS = gql`\r\n  mutation deleteUsers($ids: [ID]!) {\r\n    deleteUsers(ids: $ids) {\r\n      id\r\n      accountHolderName\r\n      employeeName\r\n      bank {\r\n        id\r\n        name\r\n      }\r\n      branch {\r\n        id\r\n        name\r\n      }\r\n      accountType\r\n      accountNumber\r\n      employeeNumber\r\n      lastUpdated\r\n    }\r\n  }\r\n`;\r\n\r\nexport {\r\n  GET_BANKS,\r\n  GET_BRANCHES,\r\n  GET_USERS,\r\n  ADD_USER,\r\n  UPDATE_USER,\r\n  DELETE_USER,\r\n  DELETE_USERS\r\n};\r\n","import * as React from \"react\";\r\nimport { withQuery, DataProps } from \"react-apollo\";\r\nimport { Table, Button } from \"antd\";\r\nimport { BankUser } from \"../config/types\";\r\nimport { GET_USERS } from \"../config/queries\";\r\nimport { ColumnProps } from \"antd/lib/table\";\r\n\r\nclass UserTable extends Table<BankUser> {}\r\n\r\ninterface Response {\r\n  users: Array<BankUser>;\r\n}\r\n\r\ninterface OwnProps {\r\n  onEdit: (user: BankUser) => void;\r\n  onSelectionChange: (\r\n    selectedRowKeys: string[] | number[],\r\n    selectedRows: BankUser[]\r\n  ) => void;\r\n}\r\n\r\nclass UserList extends React.Component<OwnProps & DataProps<Response>> {\r\n  columns: ColumnProps<BankUser>[] = [\r\n    {\r\n      title: \"Account Holder Name\",\r\n      dataIndex: \"accountHolderName\",\r\n      sorter: (a, b) => (a.accountHolderName < b.accountHolderName ? 1 : -1)\r\n    },\r\n    {\r\n      title: \"Employee Name\",\r\n      dataIndex: \"employeeName\",\r\n      sorter: (a, b) => (a.employeeName < b.employeeName ? 1 : -1)\r\n    },\r\n    {\r\n      title: \"Bank name\",\r\n      dataIndex: \"bank.name\",\r\n      sorter: (a, b) => (a.bank.name < b.bank.name ? 1 : -1)\r\n    },\r\n    {\r\n      title: \"Branch name\",\r\n      dataIndex: \"branch.name\",\r\n      sorter: (a, b) => (a.branch.name < b.branch.name ? 1 : -1)\r\n    },\r\n    {\r\n      title: \"Account type\",\r\n      dataIndex: \"accountType\",\r\n      sorter: (a, b) => (a.accountType < b.accountType ? 1 : -1)\r\n    },\r\n    {\r\n      title: \"Account number\",\r\n      dataIndex: \"accountNumber\"\r\n    },\r\n    {\r\n      title: \"Employee number\",\r\n      dataIndex: \"employeeNumber\"\r\n    },\r\n    {\r\n      title: \"\",\r\n      render: (text, record) => {\r\n        return <Button onClick={() => this.handleEdit(record)}>Edit</Button>;\r\n      }\r\n    }\r\n  ];\r\n\r\n  handleEdit(user: BankUser) {\r\n    const { onEdit } = this.props;\r\n    onEdit(user);\r\n  }\r\n\r\n  render() {\r\n    const { data, onSelectionChange } = this.props;\r\n    const { loading, users } = data;\r\n\r\n    return (\r\n      <UserTable\r\n        bordered\r\n        loading={loading}\r\n        rowKey=\"id\"\r\n        columns={this.columns}\r\n        dataSource={users}\r\n        rowSelection={{\r\n          onChange: onSelectionChange\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport { UserTable };\r\n\r\nexport default withQuery<OwnProps, Response, {}, DataProps<Response>>(\r\n  GET_USERS\r\n)(UserList);\r\n","import { Query } from \"react-apollo\";\r\nimport { Bank, Branch } from \"../config/types\";\r\n\r\ninterface BankData {\r\n  banks: Array<Bank>;\r\n}\r\n\r\ninterface BranchData {\r\n  branches: Array<Branch>;\r\n}\r\n\r\nclass BankQuery extends Query<BankData> {}\r\nclass BranchQuery extends Query<BranchData> {}\r\n\r\nexport { BankQuery, BranchQuery };\r\n","import React from \"react\";\r\nimport { Form, Select } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { BankQuery, BranchQuery } from \"../Query\";\r\nimport { GET_BANKS, GET_BRANCHES } from \"../../config/queries\";\r\nimport { BankUserInput, BankUser } from \"../../config/types\";\r\n\r\nconst { Option } = Select;\r\n\r\ninterface IProps extends FormComponentProps<BankUserInput> {\r\n  user?: BankUser;\r\n}\r\n\r\nconst Step1 = ({ form, user }: IProps) => {\r\n  const { getFieldDecorator } = form;\r\n  return (\r\n    <BankQuery query={GET_BANKS}>\r\n      {({ data, loading, error }) => {\r\n        if (loading || error) {\r\n          return null;\r\n        }\r\n        const { banks } = data || { banks: [] };\r\n        return (\r\n          <BranchQuery query={GET_BRANCHES}>\r\n            {({ data, loading, error }) => {\r\n              if (loading || error) {\r\n                return null;\r\n              }\r\n              const { branches } = data || { branches: [] };\r\n              return (\r\n                <React.Fragment>\r\n                  <Form.Item>\r\n                    {getFieldDecorator(\"bank\", {\r\n                      initialValue: user && user.bank && user.bank.id\r\n                    })(\r\n                      <Select>\r\n                        {banks.map(bank => (\r\n                          <Option key={bank.id} value={bank.id}>\r\n                            {bank.name}\r\n                          </Option>\r\n                        ))}\r\n                      </Select>\r\n                    )}\r\n                  </Form.Item>\r\n                  <Form.Item>\r\n                    {getFieldDecorator(\"branch\", {\r\n                      initialValue: user && user.branch && user.branch.id\r\n                    })(\r\n                      <Select>\r\n                        {branches.map(branch => (\r\n                          <Option key={branch.id} value={branch.id}>\r\n                            {branch.name}\r\n                          </Option>\r\n                        ))}\r\n                      </Select>\r\n                    )}\r\n                  </Form.Item>\r\n                </React.Fragment>\r\n              );\r\n            }}\r\n          </BranchQuery>\r\n        );\r\n      }}\r\n    </BankQuery>\r\n  );\r\n};\r\n\r\nexport default Step1;\r\n","import React from \"react\";\r\nimport { Form, Input } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { BankUserInput, BankUser } from \"../../config/types\";\r\n\r\ninterface IProps extends FormComponentProps<BankUserInput> {\r\n  user?: BankUser;\r\n}\r\n\r\nconst Step2 = ({ form, user }: IProps) => {\r\n  const { getFieldDecorator } = form;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"accountHolderName\", {\r\n          initialValue: user && user.accountHolderName\r\n        })(<Input placeholder={\"Account Holder Name\"} />)}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"accountType\", {\r\n          initialValue: user && user.accountType\r\n        })(<Input placeholder={\"Account Type\"} />)}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"accountNumber\", {\r\n          initialValue: user && user.accountNumber\r\n        })(<Input placeholder={\"Account Number\"} />)}\r\n      </Form.Item>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Step2;\r\n","import React from \"react\";\r\nimport { Form, Input } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { BankUserInput, BankUser } from \"../../config/types\";\r\n\r\ninterface IProps extends FormComponentProps<BankUserInput> {\r\n  user?: BankUser;\r\n}\r\n\r\nconst Step3 = ({ form, user }: IProps) => {\r\n  const { getFieldDecorator } = form;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"employeeName\", {\r\n          initialValue: user && user.employeeName\r\n        })(<Input placeholder={\"Employee Name\"} />)}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"employeeNumber\", {\r\n          initialValue: user && user.employeeNumber\r\n        })(<Input placeholder={\"Employee Number\"} />)}\r\n      </Form.Item>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Step3;\r\n","import * as React from \"react\";\r\nimport { Modal, Form, Button } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { BankUser, BankUserInput } from \"../../config/types\";\r\nimport Step1 from \"./Step1\";\r\nimport Step2 from \"./Step2\";\r\nimport Step3 from \"./Step3\";\r\n\r\nimport \"./styles.css\";\r\n\r\ninterface IStep {\r\n  title: string;\r\n  content: React.ReactNode;\r\n}\r\n\r\ninterface IProps extends FormComponentProps<BankUserInput> {\r\n  visible: boolean;\r\n  user?: BankUser;\r\n  onOk: () => void;\r\n  onCancel: () => void;\r\n  handleSubmit: () => void;\r\n}\r\n\r\ninterface IState {\r\n  curStep: number;\r\n}\r\n\r\nclass UserFormComponent extends React.Component<IProps, IState> {\r\n  state: IState = {\r\n    curStep: 0\r\n  };\r\n\r\n  next() {\r\n    const curStep = this.state.curStep + 1;\r\n    this.setState({ curStep });\r\n  }\r\n\r\n  prev() {\r\n    const curStep = this.state.curStep - 1;\r\n    this.setState({ curStep });\r\n  }\r\n\r\n  render() {\r\n    const { visible, user, onOk, onCancel, form } = this.props;\r\n    const { curStep } = this.state;\r\n\r\n    const steps: Array<IStep> = [\r\n      {\r\n        title: \"Bank Info\",\r\n        content: <Step1 form={form} user={user} />\r\n      },\r\n      {\r\n        title: \"Account Info\",\r\n        content: <Step2 form={form} user={user} />\r\n      },\r\n      {\r\n        title: \"Employee Info\",\r\n        content: <Step3 form={form} user={user} />\r\n      }\r\n    ];\r\n    return (\r\n      <Modal\r\n        title={user ? \"Edit User\" : \"Add User\"}\r\n        visible={visible}\r\n        onOk={onOk}\r\n        onCancel={onCancel}\r\n      >\r\n        <Form>\r\n          {steps.map((step, i) => (\r\n            <div\r\n              key={step.title}\r\n              className={i === curStep ? \"foo fade-in\" : \"foo\"}\r\n            >\r\n              {step.content}\r\n            </div>\r\n          ))}\r\n          {/* {curStep === 3 && (\r\n            <React.Fragment>\r\n              <span>{user && user.accountHolderName}</span>\r\n              <span>{user && user.accountNumber}</span>\r\n              <span>{user && user.accountType}</span>\r\n              <span>{user && user.employeeName}</span>\r\n              <span>{user && user.employeeNumber}</span>\r\n              <span>{user && user.bank}</span>\r\n              <span>{user && user.branch}</span>\r\n            </React.Fragment>\r\n          )} */}\r\n          <div className=\"steps-action\">\r\n            {curStep < steps.length - 1 && (\r\n              <Button onClick={() => this.next()}>Next</Button>\r\n            )}\r\n            {curStep > 0 && (\r\n              <Button style={{ marginLeft: 8 }} onClick={() => this.prev()}>\r\n                Previous\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </Form>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst UserForm = Form.create({ name: \"form_user\" })(UserFormComponent);\r\n\r\nexport { UserForm };\r\n\r\nexport default UserForm;\r\n","import * as React from \"react\";\r\nimport { withApollo, WithApolloClient, Mutation } from \"react-apollo\";\r\nimport { Button } from \"antd\";\r\nimport UserList from \"../components/UserList\";\r\nimport {\r\n  UPDATE_USER,\r\n  DELETE_USERS,\r\n  ADD_USER,\r\n  GET_USERS\r\n} from \"../config/queries\";\r\nimport UserForm from \"../components/UserForm\";\r\nimport { BankUser, BankUserInput } from \"../config/types\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\n\r\ninterface IProps {}\r\ninterface IState {\r\n  selectedRowKeys: string[] | number[];\r\n  visibleModal: boolean;\r\n  selectedUser?: BankUser;\r\n}\r\n\r\nclass Main extends React.Component<WithApolloClient<IProps>, IState> {\r\n  state: IState = {\r\n    selectedRowKeys: [],\r\n    visibleModal: false,\r\n    selectedUser: undefined\r\n  };\r\n\r\n  formRef: {\r\n    props?: FormComponentProps<BankUserInput>;\r\n  } = {};\r\n\r\n  onAddUser = () => {\r\n    this.setState({\r\n      visibleModal: true,\r\n      selectedUser: undefined\r\n    });\r\n  };\r\n\r\n  onDeleteUsers = () => {\r\n    const { selectedRowKeys: ids } = this.state;\r\n    const { client } = this.props;\r\n\r\n    client.mutate({\r\n      mutation: DELETE_USERS,\r\n      variables: { ids },\r\n      update: (cache, { data: { deleteUsers } }) => {\r\n        const data = cache.readQuery<{ users: BankUser[] }>({\r\n          query: GET_USERS\r\n        });\r\n        if (data) {\r\n          cache.writeQuery({\r\n            query: GET_USERS,\r\n            data: {\r\n              users: deleteUsers\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  onEditUser = (user: BankUser) => {\r\n    this.setState({\r\n      visibleModal: true,\r\n      selectedUser: user\r\n    });\r\n  };\r\n\r\n  onOk = () => {\r\n    this.handleSubmit();\r\n  };\r\n\r\n  onCancel = () => {\r\n    this.setState({\r\n      visibleModal: false,\r\n      selectedUser: undefined\r\n    });\r\n  };\r\n\r\n  handleSubmit = () => {\r\n    if (this.formRef.props) {\r\n      const form = this.formRef.props.form;\r\n      form.validateFields((err, values) => {\r\n        const { selectedUser } = this.state;\r\n        const { client } = this.props;\r\n        console.log(\"Received values of form: \", values);\r\n        if (err) {\r\n          return;\r\n        }\r\n\r\n        if (!selectedUser) {\r\n          client\r\n            .mutate({\r\n              mutation: ADD_USER,\r\n              variables: { user: values },\r\n              update: (cache, { data: { addUser } }) => {\r\n                const data = cache.readQuery<{ users: BankUser[] }>({\r\n                  query: GET_USERS\r\n                });\r\n                if (data) {\r\n                  cache.writeQuery({\r\n                    query: GET_USERS,\r\n                    data: {\r\n                      users: data.users.concat(addUser)\r\n                    }\r\n                  });\r\n                }\r\n              }\r\n            })\r\n            .then(() => {\r\n              form.resetFields();\r\n              this.setState({ visibleModal: false });\r\n            });\r\n        } else {\r\n          client\r\n            .mutate({\r\n              mutation: UPDATE_USER,\r\n              variables: { id: selectedUser.id, user: values }\r\n            })\r\n            .then(res => {\r\n              form.resetFields();\r\n              this.setState({ visibleModal: false });\r\n            });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  userFormRef = (formRef: { props: FormComponentProps<BankUserInput> }) => {\r\n    this.formRef = formRef;\r\n  };\r\n\r\n  render() {\r\n    const { visibleModal, selectedRowKeys, selectedUser } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Button icon=\"plus\" onClick={this.onAddUser}>\r\n          Add User\r\n        </Button>\r\n        <Button\r\n          icon=\"delete\"\r\n          disabled={selectedRowKeys.length <= 0}\r\n          onClick={this.onDeleteUsers}\r\n        >\r\n          Delete User\r\n        </Button>\r\n        <UserList\r\n          onEdit={this.onEditUser}\r\n          onSelectionChange={items => this.setState({ selectedRowKeys: items })}\r\n        />\r\n        <UserForm\r\n          wrappedComponentRef={this.userFormRef}\r\n          visible={visibleModal}\r\n          user={selectedUser}\r\n          onOk={this.onOk}\r\n          onCancel={this.onCancel}\r\n          handleSubmit={this.handleSubmit}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withApollo(Main);\r\n","import ApolloClient from 'apollo-boost';\r\n\r\nconst apolloClient = new ApolloClient({\r\n  uri: \"/graphql\"\r\n});\r\n\r\nexport {\r\n  apolloClient\r\n};","import React, { Component } from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\n\nimport Main from \"./pages/Main\";\nimport { apolloClient } from \"./config/graphql\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={apolloClient}>\n        <Main />\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}